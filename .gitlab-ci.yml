stages:
  - prepare
  - test

# Using debian:stable-slim to perform an llvm build with Z3 support
# The reason this is necessary is that we need Z3 support in scan-build
# to be able to crosscheck errors with z3 which decreases the false positives
# rate by around 5%.
#
# Also, this should only be performed once. Once in cache llvm won't be build anymore
# until we force it.
prepare-cache:
  image: debian:stable-slim
  stage: prepare
  tags:
    - linux
    - x86_64
  variables:
    INSTALL_DIR: $CI_PROJECT_DIR/install
  script:
    - if [ -d $INSTALL_DIR ]; then exit 0; fi
    - apt-get update && apt-get install -y gcc git cmake wget unzip g++ python libxml2-dev
    - wget https://github.com/Z3Prover/z3/releases/download/z3-4.8.4/z3-4.8.4.d6df51951f4c-x64-debian-8.11.zip
    - unzip z3-4.8.4.d6df51951f4c-x64-debian-8.11.zip
    - mkdir $INSTALL_DIR
    - mv z3-4.8.4.d6df51951f4c-x64-debian-8.11/bin z3-4.8.4.d6df51951f4c-x64-debian-8.11/include $INSTALL_DIR
    - export PATH=$INSTALL_DIR/bin:$PATH
    - git clone https://github.com/llvm/llvm-project.git
    - cd llvm-project
    - mkdir build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR -DCLANG_ANALYZER_ENABLE_Z3_SOLVER=ON -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_ENABLE_PROJECTS=clang -DZ3_INCLUDE_DIR=$INSTALL_DIR/include/ ../llvm/
    - make -j5
    - make -j5 install
  cache:
    paths:
      - $INSTALL_DIR
      
# Build racket with scan-build
scan-build:racket:
  stage: test
  tags:
    - linux
    - x86_64
  variables:
    INSTALL_DIR: $CI_PROJECT_DIR/install
  before_script:
    - apt-get update && apt-get install -y unzip python libxml2-dev libfindbin-libs-perl make gcc g++
    - find $INSTALL_DIR -type f
  script:
    - export PATH=$INSTALL_DIR/bin:$PATH
    - export LD_LIBRARY_PATH=$INSTALL_DIR/bin:$LD_LIBRARY_PATH
    - scan-build -o scan-report_cc -analyzer-config 'crosscheck-with-z3=true' make PKGS="" CPUS=5 CONFIGURE_ARGS_qq='CFLAGS="-O0 -g -DMZ_DECLARE_NORETURN" --disable-strip' 
  artifacts:
    paths:
      - scan-report_cc/
  cache:
    policy: pull
    paths:
      - $INSTALL_DIR

# Build racketcs with scan-build
scan-build:racketcs:
  stage: test
  tags:
    - linux
    - x86_64
  variables:
    INSTALL_DIR: $CI_PROJECT_DIR/install
  before_script:
    - apt-get update && apt-get install -y unzip python libxml2-dev libfindbin-libs-perl make gcc g++ git uuid-dev
    - find $INSTALL_DIR -type f
  script:
    - export PATH=$INSTALL_DIR/bin:$PATH
    - export LD_LIBRARY_PATH=$INSTALL_DIR/bin:$LD_LIBRARY_PATH
    - scan-build -o scan-report-cs_cc -analyzer-config 'crosscheck-with-z3=true' make PKGS="" CPUS=5 CONFIGURE_ARGS_qq='CFLAGS="-O0 -g -DMZ_DECLARE_NORETURN" --disable-strip' cs
  artifacts:
    paths:
      - scan-report-cs_cc/
  cache:
    policy: pull
    paths:
      - $INSTALL_DIR

##
## The following jobs build/test racket and racketcs with ubsan enabled
## 
.prepare:
  stage: test
  image: ubuntu:18.04
  before_script:
    - apt-get update && apt-get install -y git lsb-release gcc gcc-8 g++ g++-8 make libfontconfig1-dev libcairo2-dev openssl libpango1.0-dev libjpeg-turbo8-dev libncurses5-dev uuid-dev
    - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 700 --slave /usr/bin/g++ g++ /usr/bin/g++-7
    - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8
    - export PATH=$PWD/racket/bin:$PATH

# This is just used to provide some environment information for debugging purposes    
envinfo:
  extends: .prepare
  script:
    - cat /proc/cpuinfo
    - lsb_release -a
    - gcc -v
    - export

test:ubsan:
  extends: .prepare
  script:
    - mkdir logs
    - make CPUS="2" PKGS="racket-test db-test unstable-flonum-lib net-test" CONFIGURE_ARGS_qq='CFLAGS="-fno-var-tracking-assignments" --enable-ubsan' in-place 2>&1 | tee logs/build.log
    - raco test -l tests/racket/test 2>&1 | tee logs/test.log
    - racket -l tests/racket/contract/all 2>&1 | tee logs/contract-test.log
    - raco test -l tests/json/json 2>&1 | tee logs/json-test.log
    - raco test -l tests/file/main 2>&1 | tee logs/file-test.log
    - raco test -l tests/net/head 2>&1 | tee logs/net-head-test.log
    - raco test -l tests/net/uri-codec 2>&1 | tee logs/net-uri-codec-test.log
    - raco test -l tests/net/url 2>&1 | tee logs/net-url-test.log
    - raco test -l tests/net/url-port 2>&1 | tee logs/net-url-port-test.log
    - raco test -l tests/net/encoders 2>&1 | tee logs/net-encoders-test.log
    - raco test -l tests/openssl/basic 2>&1 | tee logs/openssl-basic-test.log
    - raco test -l tests/openssl/https 2>&1 | tee logs/openssl-https-test.log
    - raco test -l tests/match/main 2>&1 | tee logs/match-main-test.log
    - raco test -l tests/zo-path 2>&1 | tee logs/zo-path-test.log
    - raco test -l tests/xml/test 2>&1 | tee logs/xml-test.log
    - raco test -l tests/db/all-tests 2>&1 | tee logs/db-test.log
    - raco test -c tests/stxparse 2>&1 | tee logs/stxparse-test.log
  after_script:
    - grep 'runtime error' logs/*.log > runtime-errors.log
  artifacts:
    paths:
      - logs/
      - runtime-errors.log
    
# Currently there are still some failures in racketcs so we allow failure 
# at the moment but should be removed later on.
test:ubsan:cs:
  extends: .prepare
  allow_failure: true
  script:
    - mkdir cs-logs
    - make CPUS="2" PKGS="racket-test db-test unstable-flonum-lib net-test" CONFIGURE_ARGS_qq='CFLAGS="-fno-var-tracking-assignments" --enable-ubsan' cs 2>&1 | tee cs-logs/build.log
    - racocs test -l tests/racket/test 2>&1 | tee cs-logs/test.log
    - racketcs -l tests/racket/contract/all 2>&1 | tee cs-logs/contract-test.log
    - racocs test -l tests/json/json 2>&1 | tee cs-logs/json-test.log
    - racocs test -l tests/file/main 2>&1 | tee cs-logs/file-test.log
    - racocs test -l tests/net/head 2>&1 | tee cs-logs/net-head-test.log
    - racocs test -l tests/net/uri-codec 2>&1 | tee cs-logs/net-uri-codec-test.log
    - racocs test -l tests/net/url 2>&1 | tee cs-logs/net-url-test.log
    - racocs test -l tests/net/url-port 2>&1 | tee cs-logs/net-url-port-test.log
    - racocs test -l tests/net/encoders 2>&1 | tee cs-logs/net-encoders-test.log
    - racocs test -l tests/openssl/basic 2>&1 | tee cs-logs/openssl-basic-test.log
    - racocs test -l tests/openssl/https 2>&1 | tee cs-logs/openssl-https-test.log
    - racocs test -l tests/match/main 2>&1 | tee cs-logs/match-main-test.log
    - racocs test -l tests/zo-path 2>&1 | tee cs-logs/zo-path-test.log
    - racocs test -l tests/xml/test 2>&1 | tee cs-logs/xml-test.log
    - racocs test -l tests/db/all-tests 2>&1 | tee cs-logs/db-test.log
    - racocs test -c tests/stxparse 2>&1 | tee cs-logs/stxparse-test.log
  after_script:
    - grep 'runtime error' cs-logs/*.log > runtime-errors.log
  artifacts:
    paths:
      - cs-logs/
      - runtime-errors.log
